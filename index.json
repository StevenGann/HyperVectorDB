{
  "api/HyperVectorDB.Embedder.EmbedderOpenAI.OAIEmbeddingModel.html": {
    "href": "api/HyperVectorDB.Embedder.EmbedderOpenAI.OAIEmbeddingModel.html",
    "title": "Enum EmbedderOpenAI.OAIEmbeddingModel | HyperVectorDB",
    "keywords": "Enum EmbedderOpenAI.OAIEmbeddingModel Namespace HyperVectorDB.Embedder Assembly HyperVectorDB.dll Enumeration of available OpenAI embedding models. public enum EmbedderOpenAI.OAIEmbeddingModel Fields ada_v2 = 2 OpenAI's text-embedding-ada-002 model text_embedding_3_large = 1 OpenAI's text-embedding-3-large model text_embedding_3_small = 0 OpenAI's text-embedding-3-small model"
  },
  "api/HyperVectorDB.Embedder.EmbedderOpenAI.html": {
    "href": "api/HyperVectorDB.Embedder.EmbedderOpenAI.html",
    "title": "Class EmbedderOpenAI | HyperVectorDB",
    "keywords": "Class EmbedderOpenAI Namespace HyperVectorDB.Embedder Assembly HyperVectorDB.dll Implementation of IEmbedder that uses OpenAI's embedding models to convert text into vector representations. public class EmbedderOpenAI : IEmbedder Inheritance object EmbedderOpenAI Implements IEmbedder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmbedderOpenAI(string, OAIEmbeddingModel) Initializes a new instance of the EmbedderOpenAI class. public EmbedderOpenAI(string OpenAIApiKey, EmbedderOpenAI.OAIEmbeddingModel embeddingModel) Parameters OpenAIApiKey string The API key for accessing OpenAI's services. embeddingModel EmbedderOpenAI.OAIEmbeddingModel The OpenAI embedding model to use for vector generation. Fields TotalTokens Tracks the total number of tokens used across all embedding requests. public static int TotalTokens Field Value int Methods GetVector(string) Converts a single document into a vector representation. public double[] GetVector(string Document) Parameters Document string The text document to convert into a vector. Returns double[] A vector representation of the document. GetVectors(string[]) Converts multiple documents into vector representations. public double[][] GetVectors(string[] Documents) Parameters Documents string[] An array of text documents to convert into vectors. Returns double[][] An array of vector representations for each document."
  },
  "api/HyperVectorDB.Embedder.EmbedderOpenAI_ADA_002.html": {
    "href": "api/HyperVectorDB.Embedder.EmbedderOpenAI_ADA_002.html",
    "title": "Class EmbedderOpenAI_ADA_002 | HyperVectorDB",
    "keywords": "Class EmbedderOpenAI_ADA_002 Namespace HyperVectorDB.Embedder Assembly HyperVectorDB.dll Implementation of IEmbedder that uses OpenAI's text-embedding-ada-002 model to convert text into vector representations. public class EmbedderOpenAI_ADA_002 : IEmbedder Inheritance object EmbedderOpenAI_ADA_002 Implements IEmbedder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmbedderOpenAI_ADA_002(string) Initializes a new instance of the EmbedderOpenAI_ADA_002 class. public EmbedderOpenAI_ADA_002(string openaiapikey) Parameters openaiapikey string The API key for accessing OpenAI's services. Fields TotalTokens Tracks the total number of tokens used across all embedding requests. public static int TotalTokens Field Value int Methods GetVector(string) Converts a single document into a vector representation. public double[] GetVector(string Document) Parameters Document string The text document to convert into a vector. Returns double[] A vector representation of the document. GetVectors(string[]) Converts multiple documents into vector representations. public double[][] GetVectors(string[] Documents) Parameters Documents string[] An array of text documents to convert into vectors. Returns double[][] An array of vector representations for each document."
  },
  "api/HyperVectorDB.Embedder.IEmbedder.html": {
    "href": "api/HyperVectorDB.Embedder.IEmbedder.html",
    "title": "Interface IEmbedder | HyperVectorDB",
    "keywords": "Interface IEmbedder Namespace HyperVectorDB.Embedder Assembly HyperVectorDB.dll Interface for text embedding providers that convert text into vector representations. public interface IEmbedder Methods GetVector(string) Converts a single document into a vector representation. double[] GetVector(string Document) Parameters Document string The text document to convert into a vector. Returns double[] A vector representation of the document. GetVectors(string[]) Converts multiple documents into vector representations. double[][] GetVectors(string[] Documents) Parameters Documents string[] An array of text documents to convert into vectors. Returns double[][] An array of vector representations for each document."
  },
  "api/HyperVectorDB.Embedder.LmStudio.html": {
    "href": "api/HyperVectorDB.Embedder.LmStudio.html",
    "title": "Class LmStudio | HyperVectorDB",
    "keywords": "Class LmStudio Namespace HyperVectorDB.Embedder Assembly HyperVectorDB.dll Implementation of IEmbedder that uses LM Studio's local embedding service to convert text into vector representations. public class LmStudio : IEmbedder Inheritance object LmStudio Implements IEmbedder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Model Gets or sets the model name to use for embeddings. public string Model { get; set; } Property Value string URL Gets or sets the URL of the LM Studio embedding service. public string URL { get; set; } Property Value string Methods GetVector(string) Converts a single document into a vector representation. public double[] GetVector(string Document) Parameters Document string The text document to convert into a vector. Returns double[] A vector representation of the document. GetVectors(string[]) Converts multiple documents into vector representations. public double[][] GetVectors(string[] Documents) Parameters Documents string[] An array of text documents to convert into vectors. Returns double[][] An array of vector representations for each document."
  },
  "api/HyperVectorDB.Embedder.html": {
    "href": "api/HyperVectorDB.Embedder.html",
    "title": "Namespace HyperVectorDB.Embedder | HyperVectorDB",
    "keywords": "Namespace HyperVectorDB.Embedder Classes EmbedderOpenAI Implementation of IEmbedder that uses OpenAI's embedding models to convert text into vector representations. EmbedderOpenAI_ADA_002 Implementation of IEmbedder that uses OpenAI's text-embedding-ada-002 model to convert text into vector representations. LmStudio Implementation of IEmbedder that uses LM Studio's local embedding service to convert text into vector representations. Interfaces IEmbedder Interface for text embedding providers that convert text into vector representations. Enums EmbedderOpenAI.OAIEmbeddingModel Enumeration of available OpenAI embedding models."
  },
  "api/HyperVectorDB.HVDBDocument.html": {
    "href": "api/HyperVectorDB.HVDBDocument.html",
    "title": "Class HVDBDocument | HyperVectorDB",
    "keywords": "Class HVDBDocument Namespace HyperVectorDB Assembly HyperVectorDB.dll Basic object associating a text sequence with a globally unique ID. [MessagePackObject(false)] public class HVDBDocument Inheritance object HVDBDocument Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HVDBDocument() Default constructor for reflection purposes. Automatically generates a GUID for the ID property. public HVDBDocument() HVDBDocument(string) Basic constructor. Automatically generates a GUID for the ID property. public HVDBDocument(string documentstring) Parameters documentstring string Text to be stored within this document HVDBDocument(string, string) Full constructor for serialization purposes. public HVDBDocument(string id, string documentstring) Parameters id string Unique ID for this document. This must be unique within the database. documentstring string Text to be stored within this document Properties DocumentString Text stored within this document. [Key(1)] public string DocumentString { get; set; } Property Value string ID Unique ID of this document. Must be unique within the database. Will be a GUID if not specified. [Key(0)] public string ID { get; set; } Property Value string"
  },
  "api/HyperVectorDB.HVDBQueryResult.html": {
    "href": "api/HyperVectorDB.HVDBQueryResult.html",
    "title": "Class HVDBQueryResult | HyperVectorDB",
    "keywords": "Class HVDBQueryResult Namespace HyperVectorDB Assembly HyperVectorDB.dll Container class for HVDBDocument records and their linear distance from the query string. public class HVDBQueryResult Inheritance object HVDBQueryResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HVDBQueryResult(List<HVDBDocument>, List<double>) Full constructor for packing the document records and distances public HVDBQueryResult(List<HVDBDocument> documents, List<double> distances) Parameters documents List<HVDBDocument> Closest HVDBDocument records found in the database distances List<double> Distances of each HVDBDocument record from the original prompt Properties Distances Distances of each HVDBDocument record from the original prompt public List<double> Distances { get; set; } Property Value List<double> Documents Closest HVDBDocument records found in the database public List<HVDBDocument> Documents { get; set; } Property Value List<HVDBDocument>"
  },
  "api/HyperVectorDB.HyperVectorDB.DocumentPostprocessor.html": {
    "href": "api/HyperVectorDB.HyperVectorDB.DocumentPostprocessor.html",
    "title": "Delegate HyperVectorDB.DocumentPostprocessor | HyperVectorDB",
    "keywords": "Delegate HyperVectorDB.DocumentPostprocessor Namespace HyperVectorDB Assembly HyperVectorDB.dll Optional delegate for processing text prior to storage in the database. If this delegate returns null the vectorization and storage will be skipped. public delegate string? HyperVectorDB.DocumentPostprocessor(string line, string? path = null, int? lineNumber = null) Parameters line string Text to process path string Path to file text originated from, if applicable lineNumber int? Line number of file text originated from, if applicable Returns string"
  },
  "api/HyperVectorDB.HyperVectorDB.DocumentPreprocessor.html": {
    "href": "api/HyperVectorDB.HyperVectorDB.DocumentPreprocessor.html",
    "title": "Delegate HyperVectorDB.DocumentPreprocessor | HyperVectorDB",
    "keywords": "Delegate HyperVectorDB.DocumentPreprocessor Namespace HyperVectorDB Assembly HyperVectorDB.dll Optional delegate for processing text prior to vectorization. If this delegate returns null the vectorization and storage will be skipped. public delegate string? HyperVectorDB.DocumentPreprocessor(string line, string? path = null, int? lineNumber = null) Parameters line string Text to process path string Path to file text originated from, if applicable lineNumber int? Line number of file text originated from, if applicable Returns string"
  },
  "api/HyperVectorDB.HyperVectorDB.html": {
    "href": "api/HyperVectorDB.HyperVectorDB.html",
    "title": "Class HyperVectorDB | HyperVectorDB",
    "keywords": "Class HyperVectorDB Namespace HyperVectorDB Assembly HyperVectorDB.dll The top level object of the vector database system, and the center point of the API. public class HyperVectorDB Inheritance object HyperVectorDB Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HyperVectorDB(IEmbedder, string, int) If autoIndexCount is ommited or less than 1, the Auto Index functionality will be disabled. See the Auto Index documentation for more information. public HyperVectorDB(IEmbedder embedder, string path, int autoIndexCount = 0) Parameters embedder IEmbedder The IEmbedder class to provide text embedding functionality path string Path to the directory where the database will be stored on disk autoIndexCount int Optional. Number of automatic indexes to generate and use Fields DatabasePath Path to the directory where the database will be stored on disk. public readonly string DatabasePath Field Value string Properties IndexNames Provides a List of all index names in the current HyperVectorDB public List<string> IndexNames { get; } Property Value List<string> Methods CreateIndex(string) Creates a named index. Note that every index must have a name that is unique within the current HyperVectorDB. public bool CreateIndex(string name) Parameters name string Unique name for the index Returns bool True if creation was successful, False if an error was encountered1 DeleteDocument(double[]) Remove document by its vector public bool DeleteDocument(double[] vector) Parameters vector double[] Returns bool DeleteIndex(string) Deletes an index with the given name, if it exists. public bool DeleteIndex(string name) Parameters name string Name of the index to be deleted Returns bool True if an index with a matching name was found and removed. False if the HyperVectorDB does not contain an index with the specified name IndexDocument(string, DocumentPreprocessor?, DocumentPostprocessor?, string?) Indexes a single string. public bool IndexDocument(string document, HyperVectorDB.DocumentPreprocessor? preprocessor = null, HyperVectorDB.DocumentPostprocessor? postprocessor = null, string? indexName = null) Parameters document string Text to be vectorized and indexed preprocessor HyperVectorDB.DocumentPreprocessor Optional preprocessor delegate to process text prior to vectorization postprocessor HyperVectorDB.DocumentPostprocessor Optional postrpocessor delegate to process text prior to storage in database indexName string Optional. Name of the index to store in. If ommited, an index will be chosen automatically Returns bool True if the text was vectorized and stored without issue. False if an error was encountered or if the Preprocessor or Postprocessor delegates returned null IndexDocument(string, string, DocumentPreprocessor?, DocumentPostprocessor?) Indexes a single string. Note: This overload is a pass-through for backwards compatibility with previous versions. public bool IndexDocument(string indexName, string document, HyperVectorDB.DocumentPreprocessor? preprocessor = null, HyperVectorDB.DocumentPostprocessor? postprocessor = null) Parameters indexName string Name of the index to store in document string Text to be vectorized and indexed preprocessor HyperVectorDB.DocumentPreprocessor Optional preprocessor delegate to process text prior to vectorization postprocessor HyperVectorDB.DocumentPostprocessor Optional postrpocessor delegate to process text prior to storage in database Returns bool True if the text was vectorized and stored without issue. False if an error was encountered or if the Preprocessor or Postprocessor delegates returned null IndexDocumentFile(string, DocumentPreprocessor?, DocumentPostprocessor?, string?) Indexes every line in a file, sequentially public bool IndexDocumentFile(string documentPath, HyperVectorDB.DocumentPreprocessor? preprocessor = null, HyperVectorDB.DocumentPostprocessor? postprocessor = null, string? indexName = null) Parameters documentPath string Path to the file to be indexed preprocessor HyperVectorDB.DocumentPreprocessor Optional preprocessor delegate to process text prior to vectorization postprocessor HyperVectorDB.DocumentPostprocessor Optional postrpocessor delegate to process text prior to storage in database indexName string Optional. Name of the index to store in. If ommited, an index will be chosen automatically Returns bool IndexDocumentFile(string, string, DocumentPreprocessor?, DocumentPostprocessor?) Indexes every line in a file, sequentially Note: This overload is a pass-through for backwards compatibility with previous versions. public bool IndexDocumentFile(string indexName, string documentPath, HyperVectorDB.DocumentPreprocessor? preprocessor = null, HyperVectorDB.DocumentPostprocessor? postprocessor = null) Parameters indexName string Name of the index to store in documentPath string Path to the file to be indexed preprocessor HyperVectorDB.DocumentPreprocessor Optional preprocessor delegate to process text prior to vectorization postprocessor HyperVectorDB.DocumentPostprocessor Optional postrpocessor delegate to process text prior to storage in database Returns bool Load() Loads the entire database from disk. Existing indexes with duplicate names are overwritten from disk. public void Load() QueryCosineSimilarity(string, int) Queries all indexes of the current HyperVectorDB in parallel to find similar entries. public HVDBQueryResult QueryCosineSimilarity(string query, int topK = 5) Parameters query string Text to be used as query topK int Optional, indicates how many results to return Returns HVDBQueryResult Save() Saves the entire database to disk. Every index is stored in its own files. The files will not be overwritten if the index hasn't changed since a Load() or Save(). public void Save()"
  },
  "api/HyperVectorDB.html": {
    "href": "api/HyperVectorDB.html",
    "title": "Namespace HyperVectorDB | HyperVectorDB",
    "keywords": "Namespace HyperVectorDB Classes HVDBDocument Basic object associating a text sequence with a globally unique ID. HVDBQueryResult Container class for HVDBDocument records and their linear distance from the query string. HyperVectorDB The top level object of the vector database system, and the center point of the API. Delegates HyperVectorDB.DocumentPostprocessor Optional delegate for processing text prior to storage in the database. If this delegate returns null the vectorization and storage will be skipped. HyperVectorDB.DocumentPreprocessor Optional delegate for processing text prior to vectorization. If this delegate returns null the vectorization and storage will be skipped."
  },
  "auto-index.html": {
    "href": "auto-index.html",
    "title": "Auto Index Documentation | HyperVectorDB",
    "keywords": "Auto Index Documentation What is Auto Index? Auto Index is a smart feature of HyperVectorDB where the database automatically generates a pool of indexes and all entries to the database get sorted across these indexes based on a hash value. Pros and Cons Auto Index isn't ideal for every use case, but can save time and improve performance in others. Pros Spreading the database across multiple files reduces time spent reading and writing to disk by virtue of parallelized async disk IO. Multiple index objects in memory allows for parallel queries with minimal blocking. Depending on your hosting environment, multiple small files may be more efficient or more convenient than a single very large file. Cons Because the sorting across indexes is done by a hash algorithm, the database may not distribute evenly depending on your content. Your application may benefit from greater control over which index content is recorded in. With Auto Index active you may still specify which index to store to and create your own indexes, but this may be less convenient. The Auto Index feature currently only supports a single pool of indexes, so if you are using indexes to organize content you will be unable to leverage the efficiency of the pools. Support for multiple pools may be added in the future. How to Use To enable Auto Index, specify a number greater than zero in the HyperVectorDB constructor. The ideal number will vary based on your application, and there are deeper trade offs on CPU utilization during queries, disk IO cost, and more."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | HyperVectorDB",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | HyperVectorDB",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "HyperVectorDB | HyperVectorDB",
    "keywords": "HyperVectorDB HyperVectorDB is a local vector database built in C# that supports various distance/similarity measures. It is designed to store vectors and associated documents and perform high-performance vector queries. This project supports Cosine Similarity, Jaccard Dissimilarity, as well as Euclidean, Manhattan, Chebyshev, and Canberra distances. If you are looking for a python library to do the same thing check out John Dagdelen https://github.com/jdagdelen/hyperDB Installation dotnet add package HyperVectorDB Features(To be updated) Query/Response Caching: Currently only supported for cosine similarity queries. This feature allows the database to cache the results of a query for a given vector, so that the next time the same vector is queried, the results are returned immediately. This feature is useful for applications that require frequent queries on the same vector. Cache invalidation: Cache invalidation is supported for cosine similarity queries. The cache is invalidated when a new vector is added to the database, or when a vector is removed from the database. Query Functions: The database supports several types of queries for similarity and distance measures: Cosine Similarity: This function performs a Cosine Similarity query on the database. Jaccard Dissimilarity: This function performs a Jaccard Dissimilarity query on the database. Euclidean Distance: This function performs a Euclidean Distance query on the database. Manhattan Distance: This function performs a Manhattan Distance query on the database. Chebyshev Distance: This function performs a Chebyshev Distance query on the database. Canberra Distance: This function performs a Canberra Distance query on the database. Automatic Parallelization: When configured, the database will automatically split across multiple files and memory regions to take full advantage of async IO on store and multithreading on query. Data Compression: When saved to disk, the database uses LZ4 compression Each query function returns the top k documents and their corresponding similarity or distance values. The value of k is configurable and defaults to 5. Usage Usage is very straight-forward and is illustrated well by the example program in HyperVectorDBExample. A quick summary of the core elements: var db = new HyperVectorDB(new Embedder.LmStudio(), \"MyDatabase\"); The HyperVectorDB object is the core element of the library and the two things it needs to be provided are an Embedder object and a folder name. The folder name is treated as a path, which can be relative or absolute. db.CreateIndex(\"MyIndex\"); A HyperVectorDB contains one or more named indices. Support for multiple indices allows for seperation of indexed content if needed, or a single index can be used for everything. db.IndexDocument(\"This is a test document about dogs\"); Indexing of documents can be done in several ways, the most trivial being individual strings. When indexed this way, the whole string is vectorized and the vector stored in the index along with the string. db.IndexDocumentFile(filepath, CustomPreprocessor, CustomPostprocessor); Whole text files can also be indexed, in which case the files are split into lines (delimited be newline characters) and each line vectorized and the vectors stored in the index with the full path of the file and the line number where the line was found. This approach also provides the option to pass custom preprocessor and postprocessor methods that can be used to filter documents to eliminate spurious or uninteresting content. These methods are run for every line of the file and can return a processed string or null to indicate the line should be ignored completely. The preprocessor allows for modifying the text prior to vectorization, while the postprocessor allows for customizing how the data is represented in the index. db.Save(); db.Load(); As documents are indexed the database is written to disk periodically. The Save() method allows you to force a write to disk, while the Load() method forces a reload from disk, intuitively. var results = db.QueryCosineSimilarity(\"dogs and cats\", 10); Ultimately, the point of building the database is to query it. There are multiple query methods available and all of them are expecting some string and a number indicating the maximum number of results desired. Contributing Contributions are welcome. Please feel free to fork the project, make changes, and open a pull request. Please make sure to test all changes thoroughly. License This project is open-source. Released under the MIT license. Please see the license file for more information. Please note that some of the code in this project(Math.cs) is based on Acord.Math library which is released under the GNU Lesser General Public License v2.1 license. TFIDF is from Kory Becker's project located at https://github.com/primaryobjects/TFIDF About this project and its author and why it came to be It started out with me getting back into artificial intellegence and wanting to do so using c#. I was unable to find anything that would suite my needs for a vector database. Then John Dagdelen put together this vector store in python https://github.com/jdagdelen/hyperDB, it was faily basic at the time posted without that many lines of code so I decided to try and use gpt to port it to c#. This was somewhat successful but it did not quite work as needed so this project was born."
  }
}